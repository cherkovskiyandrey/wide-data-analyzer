- Пишем градл плагин, который в манифест выкидывает все сервисы которые экспортирует бандл. (+)
- Реализовать возможность внутри-бандового DI на уровне BundlePackager плагина (+)
- Подумать и отписать как быть со стандартными интерфейсами типа Runnable - public или private доступ? (+)
- Для api зависимостей, которые бандл реализует - accessType будет public,
  а для всех остальных, в том числе и implemented и стандартные java интерфейсы
   и транзитивные зависимости api - private (доступ только внутри бандла) (+)
- Продумать расположение 3-rd party библиотек (+)
- Реализовать dependency-management плагин для проверки зависемостей против dependencyManagement списка (+)
- В манифест бандла указать все зависимости ему необходимые для запуска в том числе и api (+)
- предать dependency-management консультационных характер (+)
- Поддержать возможность embedded зависимостей на уровне бандла (+)
- Обобщить подключение плагина bundle-packager для всех бандлов (+)
- Начать разработку application-packager плагина (+)
	* Разработать струкуру gradle.build файла (+)
	* Натравить bundle плагин на код программы (+)
	* Подключить из плагина bundle-packager (+)
- application-packager: разработка статических ресурсов (каталоги, скрипты....) (+)
- BUG: если почистить проект и собрать только лишь nn бандл, то он не собирётся (+)
	* во время выполнения Jar таски ещё не доступны проектные артефакты зависимостей
	* project.getTasks().getAt("build").doLast(new Action<Task>() {
- сделать buildSrc как мультипроект и включить в него необходимые подпроекты главного проекта (+)
- переписать BundleArchiver с использованием vfs (+)
- в бандл плагине реализовать ___all_api___ конфигурацию (+)
- разрезолвить ___all_api___ и сопоставить с бандловской (+)


- написать api-dependency-checker - проверяем что зависим только от других api проектов и все сторонние либы входят в dependencyManagement (-)

- зафорсить именование групп, зафорсить набор подпроектных типов и проверить их общим валидатором (-)
	нельзя завязываться на проект, т.к. бандл может не лежать в проекте а быть написанным третьей стороной,
	а мы захотим собрать плагин или приложение с этим бандлом, его проекта у нас нет, только
	на правильны идентификатор можно положиться - нужно заложить на будущее (-)

- для embedded плагина layout должен быть такой же как и для приложения: api, lib\common, lib\wda, lib (-)

- application-packager: сбор всех бандлов, апи, сторонних либ, общих библиотек и их размещенние по каталогам (-)
	* перетащить и адаптировать vfs проект (+)
	* подключиться к vfs проекту (+)
	* вытащить все onboard бандл зависимости и положить их в core_bundles, а если бандл без embedded зависимостей,
		то вытащить транзитивные зависимости и положить соответственно по api, lib\common, lib\wda, lib  (-)
--------------------------------------- как сделать ------------------------------------------------
по сути повторяем работу bundle-packager ИНДИВИДУАЛЬНО для каждого бандла!
((DefaultProjectDependency) project.getConfigurations().getByName("onboard").getDependencies().toArray(new Dependency[0])[0]).getDependencyProject().getPath()
((DefaultProjectDependency) project.getConfigurations().getByName("onboard").getDependencies().toArray(new Dependency[0])[2]).getDependencyProject().getConfigurations()                 .getByName(dependencyType.getGradleString())                 .getResolvedConfiguration()                 .getFirstLevelModuleDependencies()
Проверить что резолвинг по отдельности каждого onboard не пересикается с резолвингом onboard целиком (+) -> всё ок!!
----------------------------------------------------------------------------------------------------


- переименовать группу com.cherkovskiy на com.wide_data_analyzer (-)


- application-packager: ревизия не реализованных API с предупреждением (-)


- Начать разработку plugin-packager плагина (-)

- Hello world бандлы написать с различными вариантами DI и возможностью потом объединить их в плагины или в приложение (-)


- После сборки бандла вывести на экран сервисы которые он экспортит (-)

- Необходимо предусмотреть DI в рамках самого банда для удобства работы с кодом (-)

- Создать archetype для бандлов и программ через https://github.com/orctom/gradle-archetype-plugin (-)


- Описать архитектуру ApplicationContext с поддержкой микросервисной ServiceDiscovery логикой (-)